trigger:
  branches:
    include:
    - master
    - main
  paths:
    include:
    - src/AliceNovel
    - .azure
    exclude:
    - README.md

variables:
    BuildConfiguration: Release
    DotNetVersion: 9.0.x
    VSVERSION: 17.12

stages:
- stage: BuildAndroid
  dependsOn: []
  jobs:
  - job: BuildMAUIApps
    displayName: Build Alice Novel
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      buildConfiguration: 'Release'
      devToolsDir: '$(HOME)/DevTools'
      jdkVersion: '17.0.13'
      androidSdkToolsVersion: '6609375'
      androidApiLevel: '35'
      javaHome: '$(HOME)/DevTools/openjdk-17.0.13+11'
      androidSdkRoot: '$(HOME)/DevTools/android-sdk'
      androidSdkCmdlineTools: '$(HOME)/DevTools/android-sdk/cmdline-tools/tools/bin'

    steps:
    
    - task: UseDotNet@2
      displayName: .NET Version
      inputs:
        packageType: 'sdk'
        version: '$(DotNetVersion)'

    - task: Bash@3
      displayName: Install MAUI
      inputs:
        targetType: 'inline'
        script: |
          dotnet nuget locals all --clear
          dotnet workload install maui-android

    - task: Bash@3
      displayName: Install JDK
      inputs:
        targetType: 'inline'
        script: |
          # Create and clean DevTools directory
          rm -rf $(devToolsDir)
          mkdir -p $(devToolsDir)
          
          # Download and extract OpenJDK
          wget -q "https://github.com/AdoptOpenJDK/openjdk$(jdkVersion)-upstream-binaries/releases/download/jdk-$(jdkVersion)%2B10/OpenJDK$(jdkVersion)U-jdk_x64_linux_$(jdkVersion).tar.gz" -O $(devToolsDir)/OpenJDK.tar.gz
          tar -zxvf $(devToolsDir)/OpenJDK.tar.gz -C $(devToolsDir)
          
          export JAVA_HOME=$(javaHome)
          export PATH=$JAVA_HOME/bin:$PATH

          # Verify JDK installation
          java --version
          javac --version

    - task: Bash@3
      displayName: Install Android SDK
      inputs:
        targetType: 'inline'
        script: |
          # Download and extract Android command line tools
          mkdir -p $(androidSdkRoot)
          wget -q "https://dl.google.com/android/repository/commandlinetools-linux-$(androidSdkToolsVersion)_latest.zip" -O $(devToolsDir)/commandlinetools.zip
          unzip -o $(devToolsDir)/commandlinetools.zip -d $(androidSdkRoot)
          
          # Move tools into cmdline-tools directory
          mkdir -p $(androidSdkRoot)/cmdline-tools/tools
          mv $(androidSdkRoot)/tools $(androidSdkRoot)/cmdline-tools

          export ANDROID_SDK_ROOT=$(androidSdkRoot)
          export PATH=$(androidSdkCmdlineTools):$PATH
          
          # Accept SDK licenses and install packages
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-$(androidApiLevel)" "build-tools;$(androidApiLevel).0.0"
          sdkmanager --update

    - task: Bash@3
      displayName: Build Android App
      inputs:
        targetType: 'inline'
        script: |
          dotnet build src/AliceNovel.sln -f net9.0-android -c $(buildConfiguration) /p:JavaSdkDirectory="$(javaHome)" /p:AndroidSdkDirectory="$(androidSdkRoot)"

    - task: CopyFiles@2
      inputs:
        Contents: |
          **/*.aab
          **/*.apk
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_android'
        publishLocation: 'Container'

- stage: BuildWindows
  dependsOn: []
  jobs:
  - job: BuildMAUIApps
    displayName: Build Alice Novel App
    pool:
      vmImage: 'windows-latest'
      demands:
      - MSBuild
      
    steps:
    - task: UseDotNet@2
      displayName: .NET Version
      inputs:
        packageType: 'sdk'
        version: '$(DotNetVersion)'
    
    - task: PowerShell@2
      displayName: Install .NET MAUI
      inputs:
        targetType: 'inline'
        script: |
          & dotnet nuget locals all --clear
          & dotnet workload install maui --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
          & dotnet workload install android ios maccatalyst tvos macos maui wasm-tools maui-maccatalyst --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json

    # https://docs.microsoft.com/en-us/dotnet/maui/windows/deployment/overview
    - task: PowerShell@2
      displayName: Build Windows MSIX
      inputs:
        targetType: 'inline'
        script: |
          dotnet publish src/AliceNovel.sln -f net9.0-windows10.0.19041.0 -c Release -p:WindowsPackageType=None

    # https://docs.microsoft.com/en-us/windows/msix/desktop/cicd-overview
    # - task: DownloadSecureFile@1
    #   inputs:
    #     secureFile: '<WINDOWS SIGNING CERT PFX>'

    - task: CopyFiles@2
      inputs:
        Contents: |
          **\**\src\AliceNovel\bin\Release\net9.0-windows10.0.19041.0\win10-x64\**\*.msix
          src\AliceNovel\bin\Release\net9.0-windows10.0.19041.0\win10-x64\**\*.msix
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
   
   #https://docs.microsoft.com/en-us/windows/msix/desktop/azure-dev-ops
   #Create secret pipeline variable WindowsCertSecret with cert password
  # - script: '"C:\Program Files (x86)\Windows Kits\10\App Certification Kit\SignTool" sign /fd SHA256 /f $(Agent.TempDirectory)/XamCATFidCert.pfx /p $(WindowsCertSecret) $(Build.ArtifactStagingDirectory)\src\AliceNovel\bin\Release\net9.0-windows10.0.19041.0\win10-x64\AppPackages\src\AliceNovel_1.0.0.0_Test\src\AliceNovel_1.0.0.0_x64.msix'
  #   displayName: 'Sign MSIX Package'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_windows'
        publishLocation: 'Container'

- stage: BuildMacCatalyst
  dependsOn: []
  jobs:
  - job: BuildMAUIApps
    displayName: Build Alice Novel App
    pool:
      # currently, macos-latest (macos-14) is not include xcode 16.1. Please show below link.
      # https://github.com/actions/runner-images/blob/2c013247b1be5aaefb18a96fb0aed6e8d8fca8a2/images/macos/macos-15-Readme.md#xcode
      vmImage: 'macOS-15'
      demands:
      - MSBuild

    steps:

    - task: UseDotNet@2
      displayName: .NET Version
      inputs:
        packageType: 'sdk'
        version: '$(DotNetVersion)'

    - task: Bash@3
      displayName: Selects a specific version of Xcode
      inputs:
        targetType: 'inline'
        script: |
          sudo xcode-select -s /Applications/Xcode_16.2.app

    - task: Bash@3
      displayName: Install MAUI
      inputs:
        targetType: 'inline'
        script: |
          dotnet nuget locals all --clear
          dotnet workload install maui --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
          dotnet workload install android ios maccatalyst tvos macos maui wasm-tools --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json

    - task: Bash@3
      displayName: Restore nuget
      inputs:
        targetType: 'inline'
        script: |
          dotnet restore src/AliceNovel.sln

    # https://docs.microsoft.com/en-us/dotnet/maui/macos/deployment/overview
    - task: Bash@3
      displayName: Build MacCatalyst App
      inputs:
        targetType: 'inline'
        script: |
          dotnet build src/AliceNovel.sln -f net9.0-maccatalyst -c Release -o ./artifacts
          dotnet publish src/AliceNovel.sln  -f net9.0-maccatalyst -c Release -p:BuildIpa=True -o ./artifacts

    - task: CopyFiles@2
      inputs:
        Contents: |
          **/**/artifacts/**/*.pkg
          artifacts/**/*.pkg
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_maccatalyst'
        publishLocation: 'Container'

# - stage: BuildiOS
#   dependsOn: []
#   jobs:
#   - job: BuildMAUIApps
#     displayName: Build Alice Novel App
#     pool:
#       vmImage: 'macOS-latest'
#       demands:
#       - MSBuild
# 
#     steps:
# 
#     # https://docs.microsoft.com/en-us/azure/devops/pipelines/apps/mobile/app-signing?view=azure-devops&tabs=apple-install-during-build#sign-your-apple-ios-macos-tvos-or-watchos-app
#     # Setup Secret Pipeline Variable or Library Secrets Variable for iOS Certificate Password
#   # - task: InstallAppleCertificate@2
#   #   inputs:
#   #     certSecureFile: '<IOS_DEVELOPMENT_CERT_P12>'
#   #     certPwd: '$(iOSCertPassword)'
#   #     keychain: 'temp'
# 
#   # - task: InstallAppleProvisioningProfile@1
#   #   inputs:
#   #     provisioningProfileLocation: 'secureFiles'
#   #     provProfileSecureFile: '<IOS_PROVISIONING_PROFILE>'
# 
#     - task: UseDotNet@2
#       displayName: .NET Version
#       inputs:
#         packageType: 'sdk'
#         version: '$(DotNetVersion)'
# 
#     - task: Bash@3
#       displayName: Install MAUI
#       inputs:
#         targetType: 'inline'
#         script: |
#           dotnet nuget locals all --clear
#           dotnet workload install maui --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
#           dotnet workload install android ios maccatalyst tvos macos maui wasm-tools --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7/nuget/v3/index.json --source https://api.nuget.org/v3/index.json
# 
#     - task: Bash@3
#       displayName: Restore nuget
#       inputs:
#         targetType: 'inline'
#         script: |
#           dotnet restore src/AliceNovel.sln
# 
#   # https://docs.microsoft.com/en-us/dotnet/maui/ios/deployment/overview
#     - task: Bash@3
#       displayName: Build iOS App
#       inputs:
#         targetType: 'inline'
#         script: |
#           dotnet publish src/AliceNovel.sln -f net9.0-ios -c Release
# 
#     - task: CopyFiles@2
#       inputs:
#         Contents: |
#           **/*.app
#           **/*.ipa
#         TargetFolder: '$(Build.ArtifactStagingDirectory)'
# 
#     - task: PublishBuildArtifacts@1
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: 'drop_ios'
#         publishLocation: 'Container'
